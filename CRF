import torch
import torch.nn as nn

class CRF(nn.Module):
    def __init__(self, num_tags):
        super(CRF, self).__init__()
        self.num_tags = num_tags
        
        # 转移矩阵，表示从一个标签转移到另一个标签的得分
        self.transitions = nn.Parameter(torch.randn(num_tags, num_tags))
        
    def forward(self, emissions, tags):
        # 计算给定发射分数和真实标签的负对数似然
        return self.neg_log_likelihood(emissions, tags)
    
    def neg_log_likelihood(self, emissions, tags):
        # 初始化得分
        score = torch.zeros(1)
        
        # 添加第一个标签的发射分数
        score = score + emissions[0, tags[0]]
        
        # 添加标签之间的转移分数
        for i in range(1, len(tags)):
            score = score + self.transitions[tags[i-1], tags[i]] + emissions[i, tags[i]]
        
        # 计算所有可能路径的得分之和
        all_scores = self.compute_all_scores(emissions)
        
        # 返回负对数似然
        return torch.log(all_scores) - score
    
    def compute_all_scores(self, emissions):
        # 初始化得分张量
        scores = torch.zeros(1, self.num_tags)
        
        # 添加第一个时间步的发射分数
        scores = scores + emissions[0, :]
        
        # 动态规划计算所有可能路径的得分
        for i in range(1, len(emissions)):
            new_scores = torch.zeros(1, self.num_tags)
            for prev_tag in range(self.num_tags):
                for curr_tag in range(self.num_tags):
                    new_scores[0, curr_tag] = max(new_scores[0, curr_tag], 
                                                  scores[0, prev_tag] + self.transitions[prev_tag, curr_tag] + emissions[i, curr_tag])
            scores = new_scores
        
        # 返回所有可能路径的得分之和
        return torch.sum(torch.exp(scores))
    
    def viterbi_decode(self, emissions):
        # 初始化维特比得分和路径
        viterbi_scores = torch.zeros(len(emissions), self.num_tags)
        viterbi_paths = torch.zeros(len(emissions), self.num_tags, dtype=torch.long)
        
        # 初始化第一个时间步的维特比得分
        viterbi_scores[0, :] = emissions[0, :]
        
        # 动态规划计算维特比得分和路径
        for i in range(1, len(emissions)):
            for curr_tag in range(self.num_tags):
                for prev_tag in range(self.num_tags):
                    score = viterbi_scores[i-1, prev_tag] + self.transitions[prev_tag, curr_tag] + emissions[i, curr_tag]
                    if score > viterbi_scores[i, curr_tag]:
                        viterbi_scores[i, curr_tag] = score
                        viterbi_paths[i, curr_tag] = prev_tag
        
        # 回溯找到最佳路径
        best_path = []
        best_tag = torch.argmax(viterbi_scores[-1, :])
        best_path.append(best_tag.item())
        
        for i in range(len(emissions)-1, 0, -1):
            best_tag = viterbi_paths[i, best_tag]
            best_path.append(best_tag.item())
        
        # 反转路径并返回
        return best_path[::-1]

# 示例用法
num_tags = 5
crf = CRF(num_tags)

# 生成随机发射分数和真实标签
emissions = torch.randn(10, num_tags)
tags = torch.randint(0, num_tags, (10,))

# 计算负对数似然
loss = crf(emissions, tags)
print("Loss:", loss.item())

# 使用维特比算法进行解码
predicted_tags = crf.viterbi_decode(emissions)
print("Predicted Tags:", predicted_tags)
